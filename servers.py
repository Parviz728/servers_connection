'''
Нужно реализовать простую имитацию локальной сети, состоящую из набора серверов, соединенных между собой через роутер.
Каждый сервер может отправлять пакет любому другому серверу сети. Для этого у каждого есть свой уникальный IP-адрес.
Для простоты - это просто целое (натуральное) число от 1 и до N, где N - общее число серверов.
Предположим, сервер с IP = 2 собирается отправить пакет информации серверу с IP = 3.
Для этого, он сначала отправляет пакет роутеру, а уже тот, смотрит на IP-адрес и пересылает пакет нужному узлу (серверу).
'''
class Router:
    def __init__(self):
        self.buffer = []
        self.servers = {} # сервера получатели
    def link(self, server): # метод соединения сервера с роутером
        self.servers[server.ip] = server # Подключаем сервер к роутеру, server это атрибут класса Server
        server.router = self # сервер через свой локальный атрибут router понимает что подключен к роутеру, потому что хранит в себе ссылку/адрес этого роутера

    def unlink(self, server): # метод отсоединения
        s = self.servers.pop(server.ip, False) # отсоединяем сервак от роутера, в противном случае возвращаем False
        if s: # если сервак успешно отсоединен от роутера
            s.router = None # то локальный атрибут сервера router перестает хранить в себе адрес роутера, и хранит None

    def send_data(self): # отправляет все пакеты их буфера (self.buffers) серверам, после отправки буфер очищается
        for d in self.buffer: # перебиваем все пакеты в буффере, эти пакеты были присланы другими серверами
    # поэтому каждый пакет содержит IP адрес сервера - получателя
    # все эти пакеты это объекты класса Data
            if d.ip in self.servers: # если IP адрес сервера получателя есть среди получателей
                self.servers[d.ip].buffer.append(d) # в локальный атрибут сервера - buffer (для хранения принятых пакетов) добавляем пакет
        self.buffer.clear() # после чего очищаем буфер


class Server:
    server_ip = 1
    def __init__(self):
        self.buffer = [] # список принятых пакетов
        self.ip = Server.server_ip # инициализируем IP сервера так чтобы с каждым новым атрибутом данного класса, его IP увеличивался на единицу
        Server.server_ip += 1
        self.router = None # показывает подключен ли сервер к роутеру, на данный момент нет

    def send_data(self, data): # отправляет пакет data роутеру
        if self.router:
            Router.buffer.append(data)

    def get_data(self):
        copy_buffer = self.buffer[:] # скопировали буфер чтоб потом его вернуть
        self.buffer.clear() # очищаем входной буфер
        return copy_buffer

    def get_ip(self):
        return self.ip


class Data:
    def __init__(self, message, IP):
        self.data = message
        self.ip = IP








